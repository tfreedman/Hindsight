<article class="cf">
  <%= render 'application/aside' %>
  <section class="items right">
    <table>
      <tr>
        <th>&nbsp;</th>
        <% alternate_time_zones(@date).each_with_index do |zone, index| %>
          <th style="left: <%= (index + 1) * 144 %>px">&nbsp;</th>
        <% end %>
        <th><div style="width: 20px"></div></th>
        <% @event_groups.each do |key, value| %>
          <th><%= friendly_groups(key) %></th>
        <% end %>
        <th>&nbsp;</th>
      </tr>
      <% even = true %>
      <% @hours.each do |key, hour| %>
          <% even = !even %>
          <tr class="<% if even %>even<% else %>odd<% end %>">
            <%= render 'application/time', epoch: key, location: Hindsight::Application.credentials.default_location, show_weather: true, in_time_zone: Hindsight::Application.credentials.default_time_zone, show_time_zone: true, index: 0 %>
            <% alternate_time_zones(@date).each_with_index do |zone, index| %>
              <%= render 'application/time', epoch: key, location: zone.formatted_name, show_weather: true, in_time_zone: zone.tz, show_time_zone: true, index: index + 1 %>
            <% end %>
            <% 0.upto(@event_groups.length + 1).each_with_index do |i| %>
              <td></td>
            <% end %>
          </tr>
          <% hour.each do |event| %>
            <tr class="<%= event[:type].gsub(' ', '_') %> <% if even %>even<% else %>odd<% end %>">
              <%= render 'application/time', epoch: event[:sort_time], show_weather: false, in_time_zone: Hindsight::Application.credentials.default_time_zone, show_time_zone: false, index: 0 %>
              <% alternate_time_zones(@date).each_with_index do |zone, index| %>
                <%= render 'application/time', epoch: event[:sort_time], show_weather: false, in_time_zone: zone.tz, show_time_zone: false, index: index + 1 %>
              <% end %>
              <td>&nbsp;</td>
              <% 0.upto(@event_groups[event[:type]] - 1).each_with_index do |i| %>
                <td></td>
              <% end %>
              <td class="details" style="<% if colors(event[:type]) %>border-color: <%= colors(event[:type]) %>;<% end %> <% if colors(event[:type]) == 'transparent' %> border-top-color: <%= colors2(@event_groups[event[:type]]) %>;<% end %>" <% if event[:group] %>data-group="<%= event[:group] %>"<% end %> <% if colors(event[:type]) == "transparent" %>data-column="<%= @event_groups[event[:type]] %>"<% end %>>
                <% if ['presto_trip', 'bikeshare_trip'].include?(event[:type]) %>
                  <%= render 'application/trip', event: event %>
                <% elsif event[:type] == "Fitbit" %>
                  <%= render 'application/fitbit', event: event %>
                <% elsif event[:type] == "forum_post" %>
                  <%= render 'application/forum_post', event: event %>
                <% elsif event[:type] == "github_commit" %>
                  <%= render 'application/github_commit', event: event %>
                <% elsif event[:type] == "Photo Albums" %>
                  <%= render 'application/photo_album', event: event %>
                <% elsif event[:type].start_with?("matrix_event") %>
                  <%= render 'application/matrix_event', post: event, color: colors2(@event_groups[event[:type]]) %>
                <% elsif event[:type].start_with?("discord_message") %>
                  <%= render 'application/discord_message', post: event, color: colors2(@event_groups[event[:type]]) %>
                <% elsif event[:type].start_with?("microsoft_teams_message_", "skype_message_", "adium_message", "pidgin_message", "facebook_message", "hangouts_event_", "google_chat_message_", "google_talk_message_", "mirc_log_", "iphone_sms_", "lounge_log_", "xchat_log_", "mamirc_event_", "windows_phone_sms_", "android_sms_", "voipms_sms_", "android_mms_", "colloquy_message_") %>
                  <%= render 'application/message', event: event %>
                <% elsif event[:type].start_with?("sociallink") %>
                  <%= render 'application/sociallink/main', event: event %>
                <% elsif event[:type].start_with?("email_message") %>
                  <%= render 'application/email_message', event: event %>
                <% elsif event[:type].start_with?("android_call", "iphone_call") %>
                  <%= render 'application/call', event: event %>
                <% elsif event[:type].start_with?("calendar_event") %>
                  <%= render 'application/calendar_event', event: event %>
                <% elsif event[:type].start_with?('hindsight_file') %>
                  <%= render 'application/hindsight_file', event: event %>
                <% elsif event[:type] == 'Photos' %>
                  <%= render 'application/photos', event: event %>
                <% else %>
                  <%= event[:type] %>
                <% end %>
              </td>
              <% (@event_groups[event[:type]] + 1).upto(@event_groups.length).each_with_index do |i| %>
                <td></td>
              <% end %>
            </tr>
          <% end %>
    <% end %>
    </table>
  </section>
</article>
<script>
  function redraw() {
    details = document.querySelectorAll('.details');
    for (var i = 0; i < details.length; i++) {
      if (typeof details[i].dataset.group !== 'undefined') {
        selector = document.querySelectorAll('[data-group=' + details[i].dataset.group + ']');
        if (typeof selector[1] !== 'undefined') {
          start_event = selector[0];
          end_event = selector[1];
          selector[0].style.height = (end_event.getBoundingClientRect().top - start_event.getBoundingClientRect().top + 20) + 'px';
          //start_event.style.left = start_event.getBoundingClientRect().left + 'px';
          //start_event.style.width = (start_event.getBoundingClientRect().right - start_event.getBoundingClientRect().left) + 'px';
          start_event.children[0].style.height = 'calc(100% + 30px)';
          start_event.style.position = 'absolute';
          start_event.style.zIndex = 1;
          end_event.children[0].style.color = '#FFFFFF';
          end_event.children[0].style.position = 'relative';
          end_event.children[0].style.top = '-10px';

        }
      }
    }
  }
  window.addEventListener("load", redraw);
  window.onresize = redraw;

    // checkbox code from https://css-tricks.com/indeterminate-checkboxes/
    const nodeArray = (selector, parent=document) => [].slice.call(parent.querySelectorAll(selector));
    const allThings = nodeArray('.services input');

    document.addEventListener('change', e => {
      let check = e.target;

      if (allThings.indexOf(check) === -1) return;

      const children = nodeArray('input', check.parentNode);
      children.forEach(child => child.checked = check.checked);

      while(check){
        const parent = (check.closest(['ul']).parentNode).querySelector('input');
        const siblings = nodeArray('input', parent.closest('li').querySelector(['ul']));

        const checkStatus = siblings.map(check => check.checked);
        const every = checkStatus.every(Boolean);
        const some = checkStatus.some(Boolean);

        parent.checked = every;
        parent.indeterminate = !every && every !== some;

        check = check != parent ? parent : 0;
      }

      toggleColumns();
      return false;
    })

  function toggleColumns() {
    console.log('toggleColumns called');

    document.querySelectorAll('.services input[data-position]').forEach(l => {
      var position = l.dataset.position;
      var isChecked = l.checked;

      var isColumnEnabled = !document.querySelectorAll(`section table th:nth-child(${position})`)[0].classList.contains("hidden");

      if ((isColumnEnabled && isChecked) || (!isColumnEnabled && !isChecked)) {
        console.log('Skipping row');
        return; // do nothing
      }

      document.querySelectorAll(`section table td:nth-child(${position}), section table th:nth-child(${position})`).forEach(td => {
        if (isChecked && td.classList.contains("hidden")) {
          td.classList.remove('hidden');
        } else if (!isChecked && !td.classList.contains("hidden")) {
          td.classList.add('hidden');
        }
      });
    });
  }
</script>
